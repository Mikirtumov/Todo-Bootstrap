{"version":3,"sources":["Form.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","inputValue","setInputValue","className","placeholder","aria-label","aria-describedby","type","value","onChange","e","target","onClick","onCreate","disabled","trim","List","taskEdit","setTaskEdit","onEditTaskChange","title","taskSave","onTaskSave","list","map","el","key","id","done","onTaskDelete","onTaskDoneToggle","color","size","initialTodos","App","setList","console","log","newItem","Math","random","updateList","updatedList","filter","task","updatedTodos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db499f16.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction Form(props) {\n\n    const [inputValue, setInputValue] = useState('');\n\n\n    const onCreate = () => {\n        props.onCreate(inputValue);\n        setInputValue('');\n    };\n\n    return (\n        <div className=\"input-group mb-3\">\n            <input className=\"form-control\" placeholder=\"New Task\" aria-label=\"\" aria-describedby=\"basic-addon1\" type='text'\n                   value={inputValue} onChange={e => setInputValue(e.target.value)}/>\n            <div className=\"input-group-append\">\n                <button className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={onCreate}\n                        disabled={inputValue.trim() === ''}>Create</button>\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default Form;\n","import React, { useState } from 'react';\nimport { GiCrossMark } from \"react-icons/gi\";\nimport { IoIosCheckmarkCircleOutline } from \"react-icons/io\";\nimport { BsPencil } from \"react-icons/bs\";\n\n\nfunction List(props) {\n\n    const [taskEdit, setTaskEdit] = useState({});\n\n    const editMode = (task) => {\n        setTaskEdit(task);\n    };\n\n    const onEditTaskChange = (e) => {\n        setTaskEdit({ ...taskEdit, title: e.target.value });\n    };\n\n    const taskSave = () => {\n        props.onTaskSave(taskEdit);\n        setTaskEdit({});\n    }\n\n\n    return (\n        <div>\n            {\n            props.list.map(el =>\n                <li className=\"list-group-item\"  key={el.id}>\n\n                    {\n                        taskEdit.id === el.id\n                            ? <>\n                                <input  type=\"text\" value={taskEdit.title} onChange={onEditTaskChange} />\n                                <button className=\"btn btn-outline-secondary btn-sm ml-2\"\n                                        type=\"button\"\n                                        onClick={taskSave}\n\n                                        disabled={!taskEdit.title.trim()}>Save</button>\n                            </>\n                            : <span\n                                onClick={() => editMode(el)}>\n                            {el.done ?  <del>{el.title}</del> : <span>{el.title}</span>}\n                                <BsPencil/>\n                            </span>\n                    }\n\n                <button className=\"btn btn-outline-secondary float-right btn-sm ml-2\"\n                        type=\"button\"\n                        onClick={() => props.onTaskDelete(el.id)}>\n                    <GiCrossMark/>\n                </button>\n                <button className=\"btn btn-outline-secondary float-right btn-sm\"\n                        type=\"button\"\n                        onClick={() => props.onTaskDoneToggle(el.id)}>\n                    {el.done? 'Undone': 'Done'}\n                </button>\n                   <span className='mr-2 ml-2'>\n                       {el.done ?  <IoIosCheckmarkCircleOutline color='green' size='1.3rem'/> : null}\n                   </span>\n\n            </li>)\n\n            }\n        </div>\n    );\n}\n\nexport default List;\n","import React, {useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Form from \"./Form\";\nimport List from \"./List\";\n\nconst initialTodos = [\n    {id: 1, title: \"Read React Documentation \", done: false},\n    {id: 2, title: \"Sleep More \", done: false},\n    {id: 3, title: \"Find Job \", done: false}\n]\n\nfunction App() {\n\n    const [list, setList] = useState(initialTodos);\n\n    const onCreate = title => {\n        console.log(title)\n        const newItem = {\n            id: Math.random(),\n            title: title,\n            done: false\n        }\n\n        const updateList = [...list, newItem];\n        setList(updateList)\n    };\n\n    const onTaskDelete = (id) => {\n        const updatedList = list.filter(el => el.id !== id);\n        setList(updatedList);\n    }\n\n    const   onTaskDoneToggle = (id) => {\n        const updatedList = list.map(el => {\n            if(el.id === id) return { ...el, done: !el.done}\n            else return el;\n        })\n        setList(updatedList);\n    };\n    const onTaskSave = (task) => {\n        const updatedTodos = list.map(el => {\n            if (el.id === task.id) return { ...el, title: task.title };\n            else return el;\n        });\n\n        setList(updatedTodos);\n    };\n\n\n\n    return (\n        <div className=\"container w-25\">\n\n            <Form onCreate={onCreate}/>\n            <List list={list}\n                  onTaskDelete={onTaskDelete}\n                  onTaskDoneToggle={onTaskDoneToggle}\n                  onTaskSave={onTaskSave}\n            />\n\n\n        </div>\n\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}